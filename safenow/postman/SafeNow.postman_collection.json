{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "SafeNow API",
		"description": "Complete API collection for SafeNow civilian safety platform. Tests all core endpoints including JWT authentication, emergency alerts, shelter location, device management, safety status tracking, and emergency education. Includes comprehensive authentication flow with user registration, login, profile management, and JWT token handling.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"User registered successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('registered successfully');",
									"    pm.expect(jsonData.user).to.have.property('id');",
									"    pm.expect(jsonData.user).to.have.property('username');",
									"    pm.expect(jsonData.user).to.have.property('email');",
									"    pm.expect(jsonData.user).to.have.property('profile');",
									"});",
									"",
									"pm.test(\"JWT tokens provided\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.tokens).to.have.property('access');",
									"    pm.expect(jsonData.tokens).to.have.property('refresh');",
									"    ",
									"    // Store tokens for other requests",
									"    pm.environment.set('accessToken', jsonData.tokens.access);",
									"    pm.environment.set('refreshToken', jsonData.tokens.refresh);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"postman_user\",\n  \"email\": \"postman@safenow.com\",\n  \"password\": \"postmantest123\",\n  \"password2\": \"postmantest123\",\n  \"first_name\": \"Postman\",\n  \"last_name\": \"Test\",\n  \"phone_number\": \"+48123456789\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"register",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Login successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('Login successful');",
									"    pm.expect(jsonData.user).to.have.property('username');",
									"    pm.expect(jsonData.user).to.have.property('email');",
									"});",
									"",
									"pm.test(\"JWT tokens provided\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.tokens).to.have.property('access');",
									"    pm.expect(jsonData.tokens).to.have.property('refresh');",
									"    ",
									"    // Store tokens for other requests",
									"    pm.environment.set('accessToken', jsonData.tokens.access);",
									"    pm.environment.set('refreshToken', jsonData.tokens.refresh);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"postman_user\",\n  \"password\": \"postmantest123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Profile data returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('username');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('profile');",
									"    pm.expect(jsonData.profile).to.have.property('preferred_language');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/me/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"me",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Profile updated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.first_name).to.eql('Updated');",
									"    pm.expect(jsonData.last_name).to.eql('Name');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"first_name\": \"Updated\",\n  \"last_name\": \"Name\",\n  \"phone_number\": \"+48987654321\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/me/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"me",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Preferences",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Preferences data returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('preferred_language');",
									"    pm.expect(jsonData).to.have.property('email_notifications');",
									"    pm.expect(jsonData).to.have.property('push_notifications');",
									"    pm.expect(jsonData).to.have.property('alert_radius');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/preferences/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"preferences",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Preferences",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Preferences updated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.preferred_language).to.eql('en');",
									"    pm.expect(jsonData.email_notifications).to.eql(false);",
									"    pm.expect(jsonData.alert_radius).to.eql(25);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"preferred_language\": \"en\",\n  \"email_notifications\": false,\n  \"alert_radius\": 25\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/preferences/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"preferences",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Change Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Password changed successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('Password changed successfully');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"old_password\": \"postmantest123\",\n  \"new_password\": \"newpostmantest456\",\n  \"new_password2\": \"newpostmantest456\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/change-password/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"change-password",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"New access token provided\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access');",
									"    ",
									"    // Update stored access token",
									"    pm.environment.set('accessToken', jsonData.access);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refresh\": \"{{refreshToken}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/token/refresh/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"token",
								"refresh",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Logout successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('Logout successful');",
									"    ",
									"    // Clear stored tokens",
									"    pm.environment.unset('accessToken');",
									"    pm.environment.unset('refreshToken');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refresh\": \"{{refreshToken}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/logout/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"logout",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Emergency Services",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has status 'ok'\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('ok');",
									"});",
									"",
									"pm.test(\"Response includes counts\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.counts).to.be.an('object');",
									"    pm.expect(jsonData.counts.shelters).to.be.a('number');",
									"    pm.expect(jsonData.counts.active_alerts).to.be.a('number');",
									"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/health/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"health",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Simulate Emergency Alert",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Alert created successfully\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.be.a('number');",
							"    pm.expect(jsonData.hazard_type).to.eql('MISSILE');",
							"    pm.expect(jsonData.severity).to.eql('CRITICAL');",
							"});",
							"",
							"// Store alert ID for cleanup or further testing",
							"if (pm.response.code === 201) {",
							"    var responseJson = pm.response.json();",
							"    pm.environment.set('lastAlertId', responseJson.id);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"hazard_type\": \"MISSILE\",\n  \"severity\": \"CRITICAL\",\n  \"center_lat\": 52.2297,\n  \"center_lon\": 21.0122,\n  \"radius_m\": 5000,\n  \"valid_minutes\": 60\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/simulate-alert/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"simulate-alert",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Active Alerts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Alert objects have required fields\", function () {",
							"    var jsonData = pm.response.json();",
							"    if (jsonData.length > 0) {",
							"        pm.expect(jsonData[0]).to.have.property('id');",
							"        pm.expect(jsonData[0]).to.have.property('hazard_type');",
							"        pm.expect(jsonData[0]).to.have.property('severity');",
							"        pm.expect(jsonData[0]).to.have.property('distance_km');",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/active-alerts/?lat={{userLat}}&lon={{userLon}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"active-alerts",
						""
					],
					"query": [
						{
							"key": "lat",
							"value": "{{userLat}}"
						},
						{
							"key": "lon",
							"value": "{{userLon}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Nearby Shelters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Shelters have required fields\", function () {",
							"    var jsonData = pm.response.json();",
							"    if (jsonData.length > 0) {",
							"        pm.expect(jsonData[0]).to.have.property('id');",
							"        pm.expect(jsonData[0]).to.have.property('name');",
							"        pm.expect(jsonData[0]).to.have.property('distance_km');",
							"        pm.expect(jsonData[0]).to.have.property('eta_seconds');",
							"        pm.expect(jsonData[0]).to.have.property('is_open_now');",
							"    }",
							"});",
							"",
							"pm.test(\"Results are sorted by distance\", function () {",
							"    var jsonData = pm.response.json();",
							"    if (jsonData.length > 1) {",
							"        pm.expect(jsonData[0].distance_km).to.be.at.most(jsonData[1].distance_km);",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/nearby-shelters/?lat={{userLat}}&lon={{userLon}}&limit=3",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"nearby-shelters",
						""
					],
					"query": [
						{
							"key": "lat",
							"value": "{{userLat}}"
						},
						{
							"key": "lon",
							"value": "{{userLon}}"
						},
						{
							"key": "limit",
							"value": "3"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Device",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Device registered successfully\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.device_id).to.eql('demo_device_postman');",
							"    pm.expect(jsonData.message).to.include('registered successfully');",
							"});",
							"",
							"// Store device ID for subsequent requests",
							"pm.environment.set('testDeviceId', 'demo_device_postman');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"device_id\": \"demo_device_postman\",\n  \"push_token\": \"FCM_TOKEN_postman_demo_abc123xyz789\",\n  \"lat\": 52.2297,\n  \"lon\": 21.0122\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/devices/register/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"devices",
						"register",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Safety Status - OK",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Safety status updated\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.device_id).to.eql('demo_device_postman');",
							"    pm.expect(jsonData.status).to.eql('OK');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"device_id\": \"{{testDeviceId}}\",\n  \"status\": \"OK\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/status/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"status",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Safety Status - In Shelter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Safety status updated to IN_SHELTER\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.device_id).to.eql('demo_device_postman');",
							"    pm.expect(jsonData.status).to.eql('IN_SHELTER');",
							"    pm.expect(jsonData.shelter_id).to.eql(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"device_id\": \"{{testDeviceId}}\",\n  \"status\": \"IN_SHELTER\",\n  \"shelter_id\": 1\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/status/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"status",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Safety Instructions",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Instructions have required structure\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('title');",
							"    pm.expect(jsonData).to.have.property('steps');",
							"    pm.expect(jsonData).to.have.property('do_not');",
							"    pm.expect(jsonData).to.have.property('eta_hint');",
							"    pm.expect(jsonData.steps).to.be.an('array');",
							"    pm.expect(jsonData.do_not).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/safety-instructions/?hazard_type=MISSILE&eta_seconds=120",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"safety-instructions",
						""
					],
					"query": [
						{
							"key": "hazard_type",
							"value": "MISSILE"
						},
						{
							"key": "eta_seconds",
							"value": "120"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Emergency Education",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Education data is array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Education items have required fields\", function () {",
							"    var jsonData = pm.response.json();",
							"    if (jsonData.length > 0) {",
							"        pm.expect(jsonData[0]).to.have.property('hazard_type');",
							"        pm.expect(jsonData[0]).to.have.property('title');",
							"        pm.expect(jsonData[0]).to.have.property('description');",
							"        pm.expect(jsonData[0]).to.have.property('priority');",
							"        pm.expect(jsonData[0]).to.have.property('practical_tips');",
							"        pm.expect(jsonData[0]).to.have.property('warning_signs');",
							"        pm.expect(jsonData[0]).to.have.property('preparation_steps');",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/emergency-education/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"emergency-education",
						""
					]
				}
			},
			"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8000",
			"type": "string"
		},
		{
			"key": "userLat",
			"value": "52.2297",
			"type": "string"
		},
		{
			"key": "userLon",
			"value": "21.0122",
			"type": "string"
		},
		{
			"key": "accessToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "refreshToken",
			"value": "",
			"type": "string"
		}
	]
}